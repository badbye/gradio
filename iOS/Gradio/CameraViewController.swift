//
//  CameraViewController.swift
//  Gradio
//
//  Created by Dawood Khan on 3/5/19.
//  Copyright Â© 2019 Gradio. All rights reserved.
//

import UIKit
import Photos

class CameraViewController: UIViewController {
    
    @IBOutlet fileprivate var captureButton: UIButton!
    
    ///Displays a preview of the video output generated by the device's cameras.
    @IBOutlet fileprivate var capturePreviewView: UIView!
    
    ///Allows the user to put the camera in photo mode.
    @IBOutlet fileprivate var photoModeButton: UIButton!
    @IBOutlet fileprivate var toggleCameraButton: UIButton!
    @IBOutlet fileprivate var toggleFlashButton: UIButton!

    ///Allows the user to put the camera in video mode.
    @IBOutlet fileprivate var videoModeButton: UIButton!
    @IBOutlet var xButton: UIButton!
    
    let camera = Camera()
    
    var imageCaptureCompletionBlock: ((_ image: UIImage) -> ())?

    override var prefersStatusBarHidden: Bool { return true }
}

extension CameraViewController {
    override func viewDidLoad() {
        if AVCaptureDevice.authorizationStatus(for: AVMediaType.video) ==  AVAuthorizationStatus.authorized {
            configurecamera()
        } else {
            AVCaptureDevice.requestAccess(for: AVMediaType.video, completionHandler: { (granted: Bool) -> Void in
                if granted == true {
                    self.configurecamera()
                } else {
                    print("User rejected camera access")
                }
            })
        }
        
        func styleCaptureButton() {
            captureButton.layer.borderColor = UIColor.black.cgColor
            captureButton.layer.borderWidth = 2
            
            captureButton.layer.cornerRadius = min(captureButton.frame.width, captureButton.frame.height) / 2
        }
        
        styleCaptureButton()
        
    }
    
    func configurecamera() {
        camera.prepare {(error) in
            if let error = error {
                print(error)
            }
            
            try? self.camera.displayPreview(on: self.capturePreviewView)
        }
    }
}

extension CameraViewController {
    
    
    @IBAction func toggleFlash(_ sender: UIButton) {
        if camera.flashMode == .on {
            camera.flashMode = .off
            toggleFlashButton.setImage(#imageLiteral(resourceName: "Flash Off Icon"), for: .normal)
        }
            
        else {
            camera.flashMode = .on
            toggleFlashButton.setImage(#imageLiteral(resourceName: "Flash On Icon"), for: .normal)
        }
    }
    
    @IBAction func switchCameras(_ sender: UIButton) {
        do {
            try camera.switchCameras()
        }
            
        catch {
            print(error)
        }
        
        switch camera.currentCameraPosition {
        case .some(.front):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "Front Camera Icon"), for: .normal)
            
        case .some(.rear):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "Rear Camera Icon"), for: .normal)
            
        case .none:
            return
        }
    }
    //next do completion block for view controller class
    @IBAction func captureImage(_ sender: UIButton) {
        camera.captureImage {(image, error) in
            guard let image = image else {
                print(error ?? "Image capture error")
                return
            }
            
            self.imageCaptureCompletionBlock?(image)
            
            try? PHPhotoLibrary.shared().performChangesAndWait {
                PHAssetChangeRequest.creationRequestForAsset(from: image)
            }
//            self.captureButton.setImage(UIImage(named: "Redo Button"), for: .normal)
            self.dismiss(animated: false, completion: {
                //dismissed
            })
        }
    }
    
    @IBAction func xButtonPressed(_ sender: Any) {
        self.dismiss(animated: true)
    }
}
